---
// TODO: I wonder about using regex over the alt text of images to add context
// TODO: add variables to grab images from the strapi api as well as alt text
// currently running aws images to get up and running quickly // this doesnt include the alt text

import Layout from "../layouts/Layout.astro";
import fetchApi from "../lib/strapi";
import { Image } from "astro:assets";
import { BlocksRenderer } from "@strapi/blocks-react-renderer";
import ApartmentLayout from "../images/ApartmentLayout.astro";
// import type TextTypes from "../interfaces/text-types";
import type AddressTypes from "../interfaces/address-types";
import type RateTypes from "../interfaces/rate-types";
import type AboutTypes from "../interfaces/about-types";
import type TextImageTypes from "../interfaces/text-images-types";

const activity = await fetchApi<TextImageTypes>({
  endpoint: "activity",
  wrappedByKey: "data",
  populate: {
    text: {
      populate: true,
    },
    images: {
      populate: true,
    },
  },
});

/* const address = await fetchApi<AddressTypes>({
  endpoint: "address",
  wrappedByKey: "data",
  populate: {
    streetAddress: {
      populate: true,
    },
    addressLocality: {
      populate: true,
    },
    addressRegion: {
      populate: true,
    },
    addressCountry: {
      populate: true,
    },
    postalCode: {
      populate: true,
    },
    unit: {
      populate: true,
    },
    island: {
      populate: true,
    },
    building: {
      populate: true,
    },
    googleMapLink: {
      populate: true,
    },
  },
}); */

const rate = await fetchApi<RateTypes>({
  endpoint: "rate",
  wrappedByKey: "data",
  populate: {
    taxId: { populate: true },
    vrbo: {
      populate: true,
    },
    cleaning: {
      populate: true,
    },
    direct: {
      populate: true,
    },
    checkin: {
      populate: true,
    },
    checkout: {
      populate: true,
    },
    taxRate: {
      populate: true,
    },
    rates: {
      populate: true,
    },
    peak_season_start: {
      populate: true,
    },
    peak_season_end: {
      populate: true,
    },
    peak_rate: {
      populate: true,
    },
    off_season_rate: {
      populate: true,
    },
  },
});

const amenitie = await fetchApi<TextImageTypes>({
  endpoint: "amenitie",
  wrappedByKey: "data",
  populate: {
    text: {
      populate: true,
    },
    images: {
      populate: true,
    },
  },
});

const about = await fetchApi<AboutTypes>({
  endpoint: "about",
  wrappedByKey: "data",
  populate: {
    images: {
      populate: true,
    },
  },
});

const peak_season_start = new Date(rate.attributes.peak_season_start);

const peak_season_end = new Date(rate.attributes.peak_season_end);
// console.log(peak_season_end);

const off_season_start = new Date(rate.attributes.peak_season_start);
off_season_start.setDate(off_season_start.getDate() - 1);
// console.log(off_season_start);

const off_season_end = new Date(rate.attributes.peak_season_end);
off_season_end.setDate(off_season_end.getDate() + 1);
// console.log(off_season_end);

// console log the month and day of off_season_start as a DateString
// console.log(off_season_start.toLocaleString("default", { month: "long" }));
---

<Layout title="Welcome">
  <div class="pelican wrap">
    <!-- slighlty hacky way to order the images from a strapi gallery -->
    {
      about.attributes.images.data
        .sort((a, b) =>
          a.attributes.caption.localeCompare(b.attributes.caption)
        )
        .map((image) => (
          <div>
            {/* astro images need this on the flex in safari but it breaks the auto height */}
            <Image
              src={`${import.meta.env.AWS_IMAGES}${image.attributes.name}`}
              class="poster"
              alt={
                `${import.meta.env.STRAPI_IMAGE_URL}${image.attributes.alternativeText}` ||
                "apartment image"
              }
              inferSize={true}
            />
          </div>
        ))
    }
  </div>
  <!-- TODO: make this its own page -->
  <main>
    <hr />
    <h2 class="font-hand">Rates</h2>
    <p>
      If you want to reserve a date or have comments or questions, please email
      or call
    </p>

    <!-- waiting on temporal -->
    <h3>Off Season</h3>
    <section class="season">
      <div class="cal-date">
        <span class="month">
          {off_season_end.toUTCString().split(" ")[2]}
        </span>
        <span>
          {new Date(off_season_end).getUTCDate()}
        </span>
      </div>
      through
      <div class="cal-date">
        <span class="month">
          {off_season_start.toUTCString().split(" ")[2]}
        </span>
        <span>{new Date(off_season_start).getUTCDate()}</span>
      </div>

      ${rate.attributes.off_season_rate}
    </section>

    <hr />
    <h3>Peak Season</h3>
    <section class="season">
      <div class="cal-date">
        <span class="month">
          {peak_season_start.toUTCString().split(" ")[2]}
        </span>
        <span>
          {new Date(rate.attributes.peak_season_start).getUTCDate()}
        </span>
      </div>
      through
      <div class="cal-date">
        <span class="month">
          {peak_season_end.toUTCString().split(" ")[2]}
        </span>
        <span>
          {new Date(rate.attributes.peak_season_end).getUTCDate()}
        </span>
      </div>
      ${rate.attributes.peak_rate}
    </section>
    <hr />

    <BlocksRenderer content={rate.attributes.direct} />
    <p>Hawaii Hotel & excise Tax is %{rate.attributes.taxRate} additional</p>
    <hr />
    <h3>Cleaning</h3>
    <BlocksRenderer content={rate.attributes.cleaning} />
    <hr />
    <h3>Avaliablity</h3>
    <p>
      <a
        href={`www.VRBO.com/${rate.attributes.vrbo}`}
        class="button"
        target="_blank"
        rel="noopener noreferrer"
      >
        VRBO - {rate.attributes.vrbo}
      </a>
    </p>
    <p>
      <a
        href="https://docs.google.com/spreadsheets/d/1ACJAro0VvyIFJ-pVkg10v1InZZX4FY0yavQSbAJ5feI/edit?usp=sharing"
        class="button"
        target="_blank"
        rel="noopener noreferrer"
      >
        Google Sheet
      </a>
    </p>
    <hr />
  </main>

  <div class="pelican wrap">
    {
      amenitie.attributes.images.data.map((image) => (
        <div>
          <Image
            src={`${import.meta.env.AWS_IMAGES}${image.attributes.name}`}
            class="poster"
            alt={
              `${import.meta.env.STRAPI_IMAGE_URL}${image.attributes.alternativeText}` ||
              "apartment image"
            }
            inferSize={true}
          />
        </div>
      ))
    }
  </div>
  <div class="pelican">
    <ApartmentLayout />
  </div>
  <section>
    <hr />
    <h2 class="font-hand">Amenities</h2>
    <BlocksRenderer content={amenitie.attributes.text} />
  </section>

  <div class="pelican wrap">
    {
      activity.attributes.images.data.slice(0, 2).map((image) => (
        <div>
          <Image
            src={`${import.meta.env.AWS_IMAGES}${image.attributes.name}`}
            class="poster"
            alt={
              `${import.meta.env.STRAPI_IMAGE_URL}${image.attributes.alternativeText}` ||
              "apartment image"
            }
            inferSize={true}
          />
        </div>
      ))
    }
  </div>
  <section>
    <hr />
    <h2 class="font-hand">Things to see and do</h2>
    <BlocksRenderer content={activity.attributes.text} />
  </section>
</Layout>
